version: "2"

services:
  docs:
    build: ./docs
    image: registry.gitlab.com/thanhson1085/koor:docs
    restart: "on-failure:3"
    networks:
      - front-net

  users:
    build: ./users
    image: registry.gitlab.com/thanhson1085/koor:users
    restart: "on-failure:3"
    environment:
      GITHUB_CLIENT_SECRET: ${GITHUB_CLIENT_SECRET}
      MAILER_AUTH_PASS: ${MAILER_AUTH_PASS}
      MAILER_AUTH_USER: ${MAILER_AUTH_USER}
    depends_on:
      - db
      - redis
      - elasticsearch
      - neo4j
    networks:
      - front-net
      - back-net

  apps:
    build: ./apps
    image: registry.gitlab.com/thanhson1085/koor:apps
    restart: "on-failure:3"
    depends_on:
      - db
      - redis
      - elasticsearch
      - neo4j
    environment:
      MAILER_AUTH_PASS: ${MAILER_AUTH_PASS}
      MAILER_AUTH_USER: ${MAILER_AUTH_USER}
      CLOUDFLARE_API_KEY: ${CLOUDFLARE_API_KEY}
    networks:
      - front-net
      - back-net

  socials:
    build: ./socials
    image: registry.gitlab.com/thanhson1085/koor:socials
    restart: "on-failure:3"
    environment:
      MAILER_AUTH_PASS: ${MAILER_AUTH_PASS}
      MAILER_AUTH_USER: ${MAILER_AUTH_USER}
    depends_on:
      - db
      - redis
      - elasticsearch
      - neo4j
    networks:
      - front-net
      - back-net

  chats:
    build: ./chats
    image: registry.gitlab.com/thanhson1085/koor:chats
    restart: "on-failure:3"
    environment:
      MAILER_AUTH_PASS: ${MAILER_AUTH_PASS}
      MAILER_AUTH_USER: ${MAILER_AUTH_USER}
    depends_on:
      - db
      - redis
      - elasticsearch
      - neo4j
    networks:
      - front-net
      - back-net

  socket:
    build: ./websocket
    image: registry.gitlab.com/thanhson1085/koor:socket
    restart: "on-failure:3"
    depends_on:
      - redis
    networks:
      - front-net
      - back-net

  iot:
    build: ./iot
    image: registry.gitlab.com/thanhson1085/koor:iot
    restart: "on-failure:3"
    depends_on:
      - db
      - redis
    networks:
      - front-net
      - back-net

  site:
    build: ./site
    image: registry.gitlab.com/thanhson1085/koor:site
    networks:
      - front-net

  land:
    build: ./land
    image: registry.gitlab.com/thanhson1085/koor:land
    networks:
      - front-net

  cms:
    build: ./cms
    image: registry.gitlab.com/thanhson1085/koor:cms
    depends_on:
      - db
    environment:
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      RAILS_SERVE_STATIC_FILES: "yes"
      RAILS_LOG_TO_STDOUT: "yes"
    networks:
      - back-net
      - front-net

  redis:
    image: redis:alpine
    networks:
      - back-net

  db:
    image: mongo:3.2
    volumes:
        - "mongodb:/data/db"
    networks:
      - back-net

  nginx:
    image: nginx
    volumes:
      - ./nginx/app.template:/etc/nginx/conf.d/default.conf
      - ./nginx/nginx.template:/etc/nginx/nginx.conf
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd
    depends_on:
      - apps
      - users
      - broker
      - socket
    networks:
      - front-net
      - proxy-net

  broker:
    build: ./broker
    image: registry.gitlab.com/thanhson1085/koor:broker
    depends_on:
      - iot
    networks:
      - front-net
      - proxy-net
      - back-net

  haproxy:
    image: haproxy:alpine
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
      - ./haproxy/errors/:/usr/local/etc/haproxy/errors/
    ports:
      - "80:80"
      - "443:443"
      - "1883:1883"
      - "8883:8883"
      - "1936:1936"
    depends_on:
      - nginx
      - broker
    networks:
      - proxy-net

  neo4j:
    image: neo4j
    environment:
      - NEO4J_AUTH=neo4j/koor.10
    volumes:
      - "neo4j:/data"
    networks:
      - back-net

  elasticsearch:
    image: elasticsearch
    volumes:
        - "elasticsearch:/usr/share/elasticsearch/data"
    networks:
      - monitor-net
      - back-net

volumes:
    mongodb:
    elasticsearch:
    neo4j:
networks:
  front-net:
  back-net:
  monitor-net:
  proxy-net:
